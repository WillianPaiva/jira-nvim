{
  "permissions": {
    "allow": [
      "Bash(git add lua/jira-nvim/cli.lua lua/jira-nvim/form.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: remove unsupported --plain flags and fix empty parameter handling\n\n- Remove --plain flag from board list command (not supported by jira-cli)\n- Fix issue list to handle empty parameters without validation errors\n- Remove --plain flags from all form preset functions to prevent CLI errors\n- Ensure empty JiraIssueList commands work without throwing validation errors\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push)",
      "Bash(git add lua/jira-nvim/form.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: properly trim whitespace in form field parsing\n\n- Add proper whitespace trimming for all form fields before validation\n- Prevent empty string parameters from being passed to jira-cli\n- Fix regex pattern matching that was capturing whitespace as values\n- Ensures empty form fields don't generate invalid CLI parameters\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(jira issue list --help)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: search across all projects by default and improve error handling\n\n- Use JQL \"project IS NOT EMPTY\" as default to search all projects instead of being limited to COGNITION project\n- Update form template to include cross-project search by default\n- Add better error handling for \"No result found\" with helpful suggestion\n- Prevent project-specific limitations when no filters are applied\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add lua/jira-nvim/cli.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: remove unsupported --plain flag from project list command\n\n- Remove --plain flag from project_list function as it's not supported by jira-cli\n- Ensures JiraProjectList command works without flag errors\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(jira me)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: enable shell expansion for $(jira me) command substitution\n\n- Use shell execution with {'sh', '-c', full_cmd} instead of direct string\n- Allows $(jira me) to properly expand to username in filter arguments\n- Fixes user-specific queries like \"my issues\" and \"my in progress issues\"\n- Ensures assignee filters work correctly with shell command substitution\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add lua/jira-nvim/user.lua lua/jira-nvim/init.lua lua/jira-nvim/cli.lua lua/jira-nvim/form.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfeat: implement user caching to replace $(jira me) patterns efficiently\n\n- Add user.lua module to cache current jira username during plugin initialization\n- Replace shell expansion with efficient string replacement using cached username\n- Initialize user cache in setup() to fetch username once per session\n- Expand $(jira me) patterns in CLI commands and form parsing\n- Avoid repeated shell calls for user identification in filters\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(rg \"\\$\\(jira me\\)\" /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/form.lua)",
      "Bash(rg '\\$\\(jira me\\)' /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/form.lua)",
      "Bash(rg '\\$\\(jira me\\)' /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/ui.lua)",
      "Bash(rg -n '\\$\\(jira me\\)' /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/ui.lua)",
      "Bash(rg -n '\\$\\(jira me\\)' /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/user.lua)",
      "Bash(rg '\\$\\(jira me\\)' /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/)",
      "Bash(echo \"No $(jira me) patterns found in lua files\")",
      "Bash(git add lua/jira-nvim/form.lua lua/jira-nvim/ui.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: remove all $(jira me) shell patterns from code\n\n- Replace $(jira me) with direct cached username calls in preset functions\n- Update form template to dynamically populate assignee with cached username\n- Remove shell pattern from help examples in ui.lua\n- Use proper error handling when username not yet cached\n- Improve form cursor positioning to account for dynamic username length\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(jira issue transition --help)",
      "Bash(git add lua/jira-nvim/cli.lua lua/jira-nvim/init.lua README.md)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfeat: add issue status transition functionality\n\nAdd JiraIssueTransition command with interactive keymap support for changing ticket status. Includes validation, optional parameters for comments/assignee/resolution, and proper error handling following existing plugin patterns.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git pull --rebase)",
      "Bash(git add lua/jira-nvim/init.lua README.md)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: properly parse quoted arguments in JiraIssueTransition command\n\nFix argument parsing to handle multi-word states like \"To Be Reviewed\" by implementing proper quoted string parsing instead of naive space splitting. Updates documentation with correct usage examples.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add lua/jira-nvim/config.lua lua/jira-nvim/ui.lua README.md)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfeat: add in-buffer transition keymap for issue views\n\nAdd 't' keymap in issue view buffers to transition current issue state without typing issue key. Automatically extracts issue key from buffer title or cursor position and prompts only for new state.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add lua/jira-nvim/ui.lua)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfix: add debug info and safety check for transition keymap configuration\n\nAdd conditional keymap registration and debug notification to help troubleshoot custom keymap configurations like <M-t>. Ensures keymap is only registered when properly configured.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(jira issue view --help)",
      "Bash(jira issue --help)",
      "Bash(git add lua/jira-nvim/cli.lua lua/jira-nvim/ui.lua README.md)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfeat: add smart transition state selection with available options\n\nReplace manual state input with vim.ui.select showing available transition states for each issue. Parses available states from jira-cli error messages and provides fallback to manual input. Enhances both in-buffer and global transition keymaps.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add README.md)",
      "Bash(git commit -m \"$(cat <<'EOF'\ndocs: comprehensive documentation update with all implemented features\n\nAdd detailed documentation for smart transitions, reorganize commands by category, include complete feature summary, and update all examples to reflect new intelligent state selection functionality. Provides clear guidance for customization and usage patterns.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(jira --help)",
      "Bash(jira issue comment --help)",
      "Bash(jira issue comment add --help)",
      "Bash(jira issue assign --help)",
      "Bash(jira issue watch --help)",
      "Bash(jira user --help)",
      "Bash(jira me --help)",
      "Bash(mkdir -p /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/syntax)",
      "Bash(mkdir -p /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/ftdetect)",
      "Bash(git add lua/jira-nvim/cli.lua lua/jira-nvim/config.lua lua/jira-nvim/init.lua lua/jira-nvim/ui.lua lua/jira-nvim/search.lua syntax/ ftdetect/)",
      "Bash(git commit -m \"$(cat <<'EOF'\nfeat: implement comprehensive jira workflow enhancements\n\nMajor feature additions implementing TODO.md Phase 1 priorities:\n\n## Issue Commenting System\n- Add JiraIssueComment command for adding comments to issues\n- Add JiraIssueComments command for viewing recent comments\n- Create dedicated comment buffer with markdown support\n- Enhance issue view to show comments with --comments flag\n- Add keymaps: 'c' (add comment), 'C' (view comments)\n\n## Issue Assignment & Watching\n- Add JiraIssueAssign command with smart assignee handling\n- Add JiraIssueWatch command for adding watchers to issues\n- Support special values: \"me\", \"self\", \"unassign\", \"default\"\n- Add interactive input prompts with sensible defaults\n- Add keymaps: 'a' (assign issue), 'w' (add watcher)\n\n## Enhanced Visual Experience\n- Create custom Jira syntax highlighting (syntax/jira.vim)\n- Add filetype detection (ftdetect/jira.vim)\n- Implement visual icons and emoji indicators for issue types/statuses\n- Add progress indicators with loading spinners for async operations\n- Enhance content formatting with rich visual separators\n- Add configurable visual enhancement settings\n\n## Enhanced Navigation & Search\n- Create comprehensive search module (search.lua)\n- Add automatic issue history tracking for viewed issues\n- Implement bookmark system for frequently accessed issues\n- Add Telescope integration for fuzzy issue search (optional dependency)\n- Add JQL search support with interactive input\n- Add quick filter commands (JiraMyIssues, etc.)\n- Add keymaps: 'b' (toggle bookmark), 'h' (history), 'B' (bookmarks), '/' (search)\n\n## New Commands\n- JiraIssueComment, JiraIssueComments - Comment management\n- JiraIssueAssign, JiraIssueWatch - Assignment and watching\n- JiraSearch, JiraHistory, JiraBookmarks - Navigation\n- JiraBookmark, JiraJQL, JiraMyIssues - Advanced search\n\n## Configuration Enhancements\n- Add visual enhancement toggles (show_icons, enhanced_formatting)\n- Add progress indicator controls\n- Add custom color configuration options\n- Extend keymap configuration for all new features\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(find lua -type f -name \"*.lua\")",
      "Bash(ls -la reference/)",
      "Bash(find reference/jira-cli/pkg -name \"*.go\")",
      "Bash(find reference/jira-cli -type f -name \"*.go\" -path \"*/pkg/jira*\")",
      "Bash(find /Users/willian.vervalempaiv/Projects/jira-nvim-plugin -name \"form.lua\" -o -name \"*recent*.lua\")",
      "Bash(ls -la /Users/willian.vervalempaiv/Projects/jira-nvim-plugin/lua/jira-nvim/)",
      "Bash(git add lua/jira-nvim/search.lua)",
      "Bash(git commit -m \"Fix non-blocking search implementation and resolve syntax errors\")",
      "Bash(git push origin main)",
      "Bash(git add README.md lua/jira-nvim/cli.lua lua/jira-nvim/config.lua lua/jira-nvim/form.lua lua/jira-nvim/init.lua lua/jira-nvim/ui.lua lua/jira-nvim/user.lua lua/jira-nvim/utils.lua lua/jira-nvim/api.lua)",
      "Bash(git commit -m \"Replace jira-cli with direct Jira API integration\")",
      "Bash(git commit -m \"feat: comprehensive plugin enhancement\n\n- Added dashboard and context awareness features\n- Added git workflow integration \n- Enhanced form interface with markdown preview and templates\n- Added LSP integration for Jira issues in code\n- Optimized performance with smart caching\n- Improved error handling with helpful messages\n- Created extensive documentation\")",
      "Bash(stylua --check lua/)"
    ],
    "deny": []
  }
}